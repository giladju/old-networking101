---
# tasks file for vpc

- name: Assertions
  assert:
      that:
          - region is defined
          - envname is defined
          - cidr_block is defined
          - subnets is iterable
#          - instances is iterable
#          - public_key is defined
#          - availability_zone is defined
            #- routing_tables is iterable
          - security_groups is iterable
          # - instances is iterable
#- name: print subnets 
#  with_dict: "{{ subnets }}" 
#  debug:
#    msg: "{{ item.key }}"
#- name: print LCs
#  with_items: "{{ lcs }}" 
#  debug:
#    msg: "{{ item.role }}"
################################################################
# This task comes early because the roles sometimes don't appear until some
# time has passed since the task finished.
- name: Create IAM roles
  with_items: '{{ lcs }}'
  iam:
      iam_type: role
      name: '{{ envname }}_{{ item.role }}'
      state: present
- name: Create VPC
  ec2_vpc:
    region: "{{ region }}"
    state: present
    cidr_block: '{{ cidr_block }}'
    resource_tags:
        environment: '{{ envname }}'
        Name: '{{ envname }}'
    internet_gateway: True
    wait: yes
  register: ec2_vpc

- name: Create VPC peer connection
  ec2_vpc_peer:
    region: "{{ region }}"
    vpc_id: "{{ ec2_vpc.vpc_id }}"
    peer_vpc_id: "{{ vpc_infra }}"
    state: present
    tags:
      Name: "{{ envname }} to infra"
  register: vpc_peer
- name: Accept local VPC peering request
  ec2_vpc_peer:
    region: "{{ region }}"
    peering_id: "{{ vpc_peer.peering_id }}"
    state: accept
    tags:
      Name: "{{ envname }} to infra"
- name: Create subnets
  with_dict: "{{ subnets }}"
  ec2_vpc_subnet:
    state: present
    region: '{{ region }}'
    vpc_id: '{{ ec2_vpc.vpc_id }}'
    cidr: '{{ item.value.ipv4_cidr }}'
    az: '{{ item.value.availability_zone }}'
    resource_tags:
      Name: '{{ envname }}_{{ item.key }}'
      net: '{{ item.key }}'
      environment: '{{ envname }}'
  register: vpc_subnet

- name: Create security groups
  with_items: '{{ security_groups }}'
  ec2_group:
    description: '{{ item.description }}'
    name: '{{ item.name }}'
    vpc_id: '{{ ec2_vpc.vpc_id }}'
    region: '{{ region }}'
    state: present
    rules: '{{ item.rules|default(omit) }}'

- name: Gather secuirty group facts
  ec2_group_facts:
    region: '{{ region }}'
    filters:
      vpc_id: '{{ ec2_vpc.vpc_id }}'
  register: ec2_security_groups

- name: print ec2_security_groups
  debug:
    var: ec2_security_groups

- name: Create new nat gateway and allocate new EIP if a nat gateway does not yet exist in the subnet.
  ec2_vpc_nat_gateway:
    state: present
    subnet_id: "{{ (vpc_subnet.results|selectattr('subnet.tags.net', 'equalto', 'public')|first).subnet.id }}"
    wait: yes
    region: "{{ region }}"
    if_exist_do_not_create: true
  register: new_nat_gateway

- name: OPEN ISSUE 1 - instances in private subnet have no internet access 
  debug:
    msg: "For some reason, even though there is an igw instances created in the private subnet have no internet access - right now does not seem to be an issue"

- name: OPEN ISSUE 2 - there are manual one time operations to be done on the infra vpc to enable networking 
  debug:
    msg: "First, peering from infra to new env must be added. Second, the the routing from the VPN needs to be added to the config"

- name: Create Public routing table
  ec2_vpc_route_table:
    vpc_id: "{{ ec2_vpc.vpc_id }}"
    region: "{{ region }}"
    tags:
      Name: "public-{{ envname }}-RT"
    subnets: 
      - "{{ (vpc_subnet.results|selectattr('subnet.tags.net', 'equalto', 'public')|first).subnet.id }}"
    routes: 
      - dest: '{{ cidr_block }}'
        gateway_id: local
      - dest: '0.0.0.0/0'
        gateway_id: "{{ ec2_vpc.igw_id }}"
      - dest: "{{ cidr_block_infra }}"
        gateway_id: "{{ vpc_peer.peering_id }}"
  register: public_routing_table

- name: Create Private routing table
  ec2_vpc_route_table:
    vpc_id: "{{ ec2_vpc.vpc_id }}"
    region: "{{ region }}"
    tags:
      Name: "private-{{ envname }}-RT"
    subnets: 
      - "{{ (vpc_subnet.results|selectattr('subnet.tags.net', 'equalto', 'private')|first).subnet.id }}"
    routes: 
      - dest: '{{ cidr_block }}'
        gateway_id: local
      - dest: '0.0.0.0/0'
        gateway_id: "{{ new_nat_gateway.nat_gateway_id }}"
      - dest: "{{ cidr_block_infra }}"
        gateway_id: "{{ vpc_peer.peering_id }}"
  register: private_routing_table

- name: Create RDS routing table
  ec2_vpc_route_table:
    vpc_id: "{{ ec2_vpc.vpc_id }}"
    region: "{{ region }}"
    tags:
      Name: "private-rds-{{ envname }}-RT"
    subnets: 
      - "{{ (vpc_subnet.results|selectattr('subnet.tags.net', 'equalto', 'rds')|first).subnet.id }}"
    routes:
      - dest: '{{ cidr_block }}'
        gateway_id: local
      - dest: '0.0.0.0/0'
        gateway_id: "{{ new_nat_gateway.nat_gateway_id }}"
      - dest: "{{ cidr_block_infra }}"
        gateway_id: "{{ vpc_peer.peering_id }}"
  register: rds_routing_table